name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Build the Docker image
      uses: actions/checkout@v3    
      with:
        fetch-depth: 0

    #nuevo_paquete_para_manejar_las_versiones_de_forma_automatica_cuando_hacemos_commit
    - uses: paulhatch/semantic-version@v5.3.0
      with:
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "mayor:"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs       
        minor_pattern: "menor:"
        # A string to determine the format of the version output patch es la version
        version_format: "${major}.${minor}.${patch}-prerelease${increment}"
      id: version
        
    # nuevospasso
    - name: nombreCualqueira login
    # aqui_se_usa_la_variable_creada_en_github_secrets
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}       
        NEW_VERSION: ${{ steps.version.outputs.version }}
      #aqui_Se_pone_lo_que_Se_va_correr
      run: |
        echo "LA versiona crear es : $NEW_VERSION !!!! "
        #Indica_que_se_van_agregar_Muchas_instrucciones_y_que_cada_una_va_ser_independiente
        echo "iniciando login"
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        echo "Fin de login "
    - name: contruir imagane
      env:
        #creamos una variable para enlazar lo que nos devuelve el paquete paulhatch/semantic-version@v5.3.0
        NEW_VERSION: ${{ steps.version.outputs.version }}
      run: |
        docker build -t tecnolobo/docker-graphql:$NEW_VERSION .
    - name: push imagen a dockerhub
      env:
        #creamos una variable para enlazar lo que nos devuelve el paquete paulhatch/semantic-version@v5.3.0
        NEW_VERSION: ${{ steps.version.outputs.version }}
      run: |
        docker push tecnolobo/docker-graphql:$NEW_VERSION 
